---

- name: "create namespace for noobaa operator"
  k8s:
    state: present
    definition: "{{ lookup('template', resource ) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/namespace.j2"
    namespace: "{{ noobaa_namespace }}"
    namespace_description: ""
    namespace_display_name: ""

- name: "create operator group in {{ noobaa_namespace }}"
  k8s:
    state: present
    namespace: "{{ noobaa_namespace }}"
    definition: "{{ lookup('template', resource ) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/operatorgroup.j2"
    operator_group: "{{ noobaa_operator_group }}"
    operatorgroup_target_namespace: "{{ noobaa_namespace }}"

- name: "get packagemanifest for ocs operator"
  k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: "{{ ocs_packagemanifest }}"
    namespace: openshift-marketplace
  register: r_packagemanifest

- name: "set facts for ocs operator"
  set_fact:
    ocs_subscription_package_name: "{{ r_packagemanifest.resources[0].status.packageName }}"
    ocs_subscription_catalog_source: "{{ r_packagemanifest.resources[0].status.catalogSource }}"
    ocs_subscription_catalog_source_namespace: "{{ r_packagemanifest.resources[0].status.catalogSourceNamespace }}"

- name: "determine channel for ocs operator if no channel specified"
  when: ocs_subscription_channel | default("") | length == 0
  set_fact:
    ocs_subscription_channel: "{{ r_packagemanifest.resources[0].status.defaultChannel }}"

- name: "print ocs channel to be installed"
  debug:
    msg: "OCS operator channel to be installed: {{ ocs_subscription_channel }}"

- name: "create subscription for ocs operator in {{ ocs_subscription_namespace }}"
  k8s:
    state: present
    namespace: "{{ ocs_subscription_namespace }}"
    definition: "{{ lookup('template', resource) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/subscription.j2"
    subscription_name: "{{ ocs_subscription_name }}"
    subscription_channel: "{{ ocs_subscription_channel }}"
    automatic_installplan_approval: "{{ ocs_automatic_installplan_approval }}"
    subscription_package_name: "{{ ocs_subscription_package_name }}"
    subscription_catalog_source: "{{ ocs_subscription_catalog_source }}"
    subscription_catalog_source_namespace: "{{ ocs_subscription_catalog_source_namespace }}"
    subscription_starting_csv: "{{ ocs_subscription_starting_csv }}"

- name: "wait until installplan is created"
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: InstallPlan
    namespace: "{{ ocs_subscription_namespace }}"
  register: r_install_plan
  retries: 30
  delay: 5
  until:
    - r_install_plan.resources | length > 0
    - r_install_plan.resources | to_json | from_json | json_query(query) | length > 0
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], '{{ csv_prefix }}')].metadata.name

- name: "manually approve installplan"
  when: not ocs_automatic_installplan_approval
  block:
    - name: "set installplan name"
      set_fact:
        ocs_install_plan: >-
          {{ r_install_plan.resources | to_json | from_json | json_query(query) }}
      vars:
        query: >-
          [?starts_with(spec.clusterServiceVersionNames[0], 'ocs-operator')].metadata.name|[0]

    - name: "approve installplan"
      k8s:
        state: present
        namespace: "{{ ocs_subscription_namespace }}"
        definition: "{{ lookup( 'template', resource ) }}"
      vars:
        resource: "{{ resources_dir }}/installplan.j2"
        install_plan_name: "{{ ocs_install_plan }}"

- name: "get subscription"
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: "{{ ocs_subscription_name }}"
    namespace: "{{ ocs_subscription_namespace }}"
  register: r_subscription
  retries: 30
  delay: 5
  until:
    - r_subscription.resources[0].status.currentCSV is defined
    - r_subscription.resources[0].status.currentCSV | length > 0

- debug:
    var: r_subscription.resources[0].status.currentCSV

- name: "wait until csv is installed"
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ r_subscription.resources[0].status.currentCSV }}"
    namespace: "{{ ocs_subscription_namespace }}"
  register: r_csv
  retries: 15
  delay: 5
  until:
    - r_csv.resources[0].status.phase is defined
    - r_csv.resources[0].status.phase | length > 0
    - r_csv.resources[0].status.phase == "Succeeded"

- name: "wait for ocs operator to be ready"
  k8s_info:
    api_version: v1
    kind: Deployment
    namespace: "{{ ocs_subscription_namespace }}"
    name: "{{ ocs_operator_deployment }}"
  register: r_ocs_operator_deployment
  retries: 40
  delay: 10
  until:
    - r_ocs_operator_deployment.resources is defined
    - r_ocs_operator_deployment.resources | length | int > 0
    - r_ocs_operator_deployment.resources[0].status.availableReplicas is defined
    - r_ocs_operator_deployment.resources[0].status.availableReplicas | int == r_ocs_operator_deployment.resources[0].spec.replicas | int

- name: "create Noobaa custom resource"
  k8s:
    state: present
    namespace: "{{ noobaa_namespace }}"
    definition: "{{ lookup('template', resource) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/noobaa.j2"

- name: "wait until noobaa is active"
  k8s_info:
    api_version: noobaa.io/v1alpha1
    kind: noobaa
    namespace: "{{ noobaa_namespace }}"
    name: "{{ noobaa_resource_name }}"
  register: r_noobaa
  retries: 20
  delay: 10
  until:
   - r_noobaa.resources is defined
   - r_noobaa.resources | length | int > 0
   - r_noobaa.resources[0].status.phase is defined
   - r_noobaa.resources[0].status.phase == "Ready"

- name: "create noobaa s3 bucket"
  k8s:
    state: present
    namespace: "{{ noobaa_namespace }}"
    definition: "{{ lookup('template', resource) | from_yaml }}"
  vars:
    resource: "{{ resources_dir }}/local-s3-bucket.j2"

- name: "wait until noobaa bucket is bound"
  k8s_info:
    api_version: objectbucket.io/v1alpha1
    kind: ObjectBucketClaim
    namespace: "{{ noobaa_namespace }}"
    name: "{{ noobaa_bucket_name }}-claim"
  register: r_noobaa_bucket_claim
  retries: 20
  delay: 10
  until:
   - r_noobaa_bucket_claim.resources is defined
   - r_noobaa_bucket_claim.resources | length | int > 0
   - r_noobaa_bucket_claim.resources[0].status.phase is defined
   - r_noobaa_bucket_claim.resources[0].status.phase == "Bound"

- name: "get noobaa s3 bucket aws access key id"
  k8s_info:
    api_version: v1
    kind: secret
    namespace: "{{ noobaa_namespace }}"
    name: "{{ noobaa_bucket_name }}-claim"
  register: r_noobaa_s3_bucket_access_key_id
  retries: 20
  delay: 10
  until:
   - r_noobaa_s3_bucket_access_key_id.resources is defined
   - r_noobaa_s3_bucket_access_key_id.resources | length | int > 0

- name: "noobaa s3 bucket aws access key id"
  debug:
    msg: "AWS Access Key ID: {{ r_noobaa_s3_bucket_access_key_id.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}"

- name: "noobaa s3 bucket aws secret access key"
  debug:
    msg: "AWS Secret Access Key: {{ r_noobaa_s3_bucket_access_key_id.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}"
