apiVersion: {{ kafka_cr_api_version }}
kind: Kafka
metadata:
  name: {{ kafka_cluster }}
spec:
  kafka:
    version: {{ kafka_version }}
    replicas: {{ kafka_replicas }}
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: oauth
          validIssuerUri: https://{{ kafka_oauth_rhsso_host }}/auth/realms/{{ kafka_oauth_rhsso_realm }}
          jwksEndpointUri: https://{{ kafka_oauth_rhsso_host }}/auth/realms/{{ kafka_oauth_rhsso_realm }}/protocol/openid-connect/certs
          tokenEndpointUri: 
          userNameClaim: preferred_username
          maxSecondsWithoutReauthentication: {{ kafka_oauth_jwt_token_lifespan }}
          enablePlain: {{ kafka_oauth_enable_plain }}
{% if kafka_listener_external|bool == true %}
      - name: external
        port: 9094
        type: {{ kafka_listener_external_type }}
        tls: true
        authentication:
          type: oauth
          clientId: {{ kafka_oauth_plain_client_id }}
          clientSecret:
            key: {{ kafka_oauth_client_credentials_secret_key }}
            secretName: {{ kafka_oauth_client_credentials_secret }}
          validIssuerUri: https://{{ kafka_oauth_rhsso_host }}/auth/realms/{{ kafka_oauth_rhsso_realm }}
          jwksEndpointUri: https://{{ kafka_oauth_rhsso_host }}/auth/realms/{{ kafka_oauth_rhsso_realm }}/protocol/openid-connect/certs
          tokenEndpointUri: https://{{ kafka_oauth_rhsso_host }}/auth/realms/{{ kafka_oauth_rhsso_realm }}/protocol/openid-connect/token
          userNameClaim: preferred_username
          maxSecondsWithoutReauthentication: {{ kafka_oauth_jwt_token_lifespan }}
          enablePlain: {{ kafka_oauth_enable_plain }}
        configuration:
          brokerCertChainAndKey:
            secretName: {{ kafka_tls_secret }}
            certificate: {{ kafka_tls_secret_crt_key }}
            key: {{ kafka_tls_secret_privkey_key }}   
{% endif %}
    resources:
      requests:
        cpu: '{{ kafka_requests_cpu }}'
        memory: '{{ kafka_requests_memory }}'
      limits:
        cpu: '{{ kafka_limits_cpu }}'
        memory: '{{ kafka_limits_memory }}'
    livenessProbe:
      initialDelaySeconds: {{ kafka_liveness_probe_initial_delay_seconds }}
      timeoutSeconds: {{ kafka_liveness_probe_timeout_seconds }}
    readinessProbe:
      initialDelaySeconds: {{ kafka_readiness_probe_initial_delay_seconds }}
      timeoutSeconds: {{ kafka_readiness_probe_timeout_seconds }}
    jvmOptions:
      gcLoggingEnabled: false
{% if kafka_enable_metrics|bool == true %}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: {{ kafka_configmap_metrics }}
          key: {{ kafka_configmap_metrics_key }}
{% endif %}
    config:
      auto.create.topics.enable: {{ kafka_enable_auto_create_topics }}
      offsets.topic.replication.factor: {{ kafka_offsets_topic_replication_factor }}
      transaction.state.log.replication.factor: {{ kafka_transaction_state_log_replication_factor }}
      transaction.state.log.min.isr: {{ transaction_state_log_min_isr }}
      inter.broker.protocol.version: '{{ kafka_inter_broker_protocol_version }}'
    storage:
{% if kafka_storage_type == "persistent" %}
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: {{ kafka_volume_capacity }}
          deleteClaim: {{ kafka_delete_claim }}
{% endif %}
{% if kafka_storage_type == "ephemeral" %}
      type: ephemeral
{% endif %}
  zookeeper:
    replicas: {{ zookeeper_replicas }}
    resources:
      requests:
        cpu: '{{ zookeeper_requests_cpu }}'
        memory: '{{ zookeeper_requests_memory }}'
      limits:
        cpu: '{{ zookeeper_limits_cpu }}'
        memory: '{{ zookeeper_limits_memory }}'
    readinessProbe:
      initialDelaySeconds: {{ zookeeper_readiness_probe_initial_delay_seconds }}
      timeoutSeconds: {{ zookeeper_readiness_probe_timeout_seconds }}
    livenessProbe:
      initialDelaySeconds: {{ zookeeper_liveness_probe_initial_delay_seconds }}
      timeoutSeconds: {{ zookeeper_liveness_probe_timeout_seconds }}
{% if kafka_enable_metrics|bool == true %}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: {{ zookeeper_configmap_metrics }}
          key: {{ zookeeper_configmap_metrics_key }}
{% endif %}
    storage:
{% if zookeeper_storage_type == "persistent" %}
      type: persistent-claim
      size: {{ zookeeper_volume_capacity }}
      deleteClaim: {{ zookeeper_delete_claim }}
{% endif %}
{% if zookeeper_storage_type == "ephemeral" %}
      type: ephemeral
{% endif %}
  entityOperator:
    topicOperator:
      resources:
        requests:
          cpu: "{{ topic_operator_requests_cpu }}"
          memory: {{ topic_operator_requests_memory }}
        limits:
          cpu: "{{ topic_operator_limits_cpu }}"
          memory: {{ topic_operator_limits_memory }}
      readinessProbe:
        initialDelaySeconds: {{ topic_operator_readiness_probe_initial_delay_seconds }}
        timeoutSeconds: {{ topic_operator_readiness_probe_timeout_seconds }}
      livenessProbe:
        initialDelaySeconds: {{ topic_operator_liveness_probe_initial_delay_seconds }}
        timeoutSeconds: {{ topic_operator_liveness_probe_timeout_seconds }}
    userOperator: 
      resources:
        requests:
          cpu: "{{ user_operator_requests_cpu }}"
          memory: {{ user_operator_requests_memory }}
        limits:
          cpu: "{{ user_operator_limits_cpu }}"
          memory: {{ user_operator_limits_memory }}
      readinessProbe:
        initialDelaySeconds: {{ user_operator_readiness_probe_initial_delay_seconds }}
        timeoutSeconds: {{ user_operator_readiness_probe_timeout_seconds }}
      livenessProbe:
        initialDelaySeconds: {{ user_operator_liveness_probe_initial_delay_seconds }}
        timeoutSeconds: {{ user_operator_liveness_probe_timeout_seconds }}
{% if kafka_enable_exporter|bool == true %}
  kafkaExporter:
    groupRegex: ".*"
    topicRegex: "^topic-.+"
    resources:
      requests:
        cpu: 200m
        memory: 64Mi
      limits:
        cpu: 500m
        memory: 128Mi
    logging: warn
    enableSaramaLogging: true
    readinessProbe: 
      initialDelaySeconds: 15
      timeoutSeconds: 5
    livenessProbe: 
      initialDelaySeconds: 15
      timeoutSeconds: 5
{% endif %}